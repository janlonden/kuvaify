!function e(t,n,i){function s(r,l){if(!n[r]){if(!t[r]){var a="function"==typeof require&&require;if(!l&&a)return a(r,!0);if(o)return o(r,!0);var d=new Error("Cannot find module '"+r+"'");throw d.code="MODULE_NOT_FOUND",d}var v=n[r]={exports:{}};t[r][0].call(v.exports,function(e){var n=t[r][1][e];return s(n?n:e)},v,v.exports,e,t,n,i)}return n[r].exports}for(var o="function"==typeof require&&require,r=0;r<i.length;r++)s(i[r]);return s}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i={linkElement:"body",fileTypes:["jpg","jpeg","png","gif"],coverScreen:!0,showShortcuts:!0,transitionSpeed:400,transitionScale:.08,zoomRatio:.2,smallSize:768,mediumSize:1280},s=document.body,o=[],r=null,l=null,a=null,d=s.clientWidth,v=s.clientHeight,c=!1,u=function(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];e.linkElement&&"string"==typeof e.linkElement&&(i.linkElement=e.linkElement),e.fileTypes&&e.fileTypes.constructor===Array&&(i.fileTypes=e.fileTypes),void 0!==e.coverScreen&&e.coverScreen===!1&&(i.coverScreen=!1),void 0!==e.showShortcuts&&e.showShortcuts===!1&&(i.showShortcuts=!1),e.transitionSpeed&&"number"==typeof e.transitionSpeed&&e.transitionSpeed>=100&&(i.transitionSpeed=e.transitionSpeed),e.transitionScale&&("number"==typeof e.transitionScale&&(i.transitionScale=e.transitionScale),0===e.transitionScale&&(i.transitionScale=0)),e.zoomScale&&("number"==typeof e.zoomScale&&(i.zoomScale=e.zoomScale),0===e.zoomScale&&(i.zoomScale=0)),e.smallSize&&"number"==typeof e.smallSize&&(i.smallSize=e.smallSize),e.mediumSize&&"number"==typeof e.mediumSize&&(i.mediumSize=e.mediumSize),f.get(),f.push(),f.addEventListeners()},m=function(e){u(e)},f={links:[],get:function(){var e=Array.from(document.querySelectorAll(i.linkElement+" a")),t=i.fileTypes.join("|"),n=new RegExp(".("+t+")$");e.forEach(function(e){e.pathname.match(n)&&f.links.push(e)})},push:function(){f.links.forEach(function(e){w.push(e)})},addEventListeners:function(){f.links.forEach(function(e){e.addEventListener("click",function(t){c=!1;var n=f.links.indexOf(e);w.current(n),p.append(),S.append(),h.append(),L.append(),E.append(),b.append(),setTimeout(function(){p.visibility("show"),h.visibility("show"),L.visibility("show"),E.visibility("depends"),w.prepare(n)},100),setTimeout(function(){p.addEventListeners(),S.addEventListeners(),L.addEventListeners(),h.addEventListeners(),E.addEventListeners()},200),t.preventDefault()})})}},p={element:document.createElement("div"),focusStarted:!1,focus:function(e){p.focusStarted===!1&&(p.visibility("focus"),setTimeout(function(){p.visibility("unfocus"),p.focusStarted=!1},2e3)),p.focusStarted=!0},append:function(){p.element.id="kuvaify",p.element.style.transition="opacity "+i.transitionSpeed+"ms ease, visibility "+i.transitionSpeed+"ms ease",s.appendChild(p.element)},visibility:function(e){"show"===e&&p.element.classList.add("visible"),"hide"===e&&p.element.classList.remove("visible"),"focus"===e&&p.element.classList.add("focused"),"unfocus"===e&&p.element.classList.remove("focused")},addEventListeners:function(){window.addEventListener("mousemove",p.focus)},removeEventListeners:function(){window.removeEventListener("mousemove",p.focus)}},w={push:function(e){var t={element:document.createElement("img"),href:e.pathname,smallHref:e.getAttribute("data-kuvaify-small")||null,mediumHref:e.getAttribute("data-kuvaify-medium")||null,caption:null,scale:1,scaleRatio:i.zoomRatio,rotate:0,offx:0,offy:0,transition:"width "+i.transitionSpeed+"ms ease, height "+i.transitionSpeed+"ms ease, transform "+i.transitionSpeed+"ms ease, opacity "+i.transitionSpeed+"ms ease, visibility "+i.transitionSpeed+"ms ease",loaded:!1};t.element.style.transition=t.transition,t.element.style.left=null,t.element.style.top=null,t.element.classList.add("kuvaify-img"),e.getAttribute("data-kuvaify-caption")&&(t.caption=document.createElement("div"),t.caption.innerHTML="<p>"+e.getAttribute("data-kuvaify-caption").replace(/<[^>]+>/gi,"")+"</p>",t.caption.id="kuvaify-caption",t.caption.style.transition="opacity "+i.transitionSpeed+"ms ease, visibility "+i.transitionSpeed+"ms ease"),o.push(t)},current:function(e){var t=o[e];r=o.indexOf(t),l=o[r+1]?r+1:null,a=o[r-1]?r-1:null},href:function(){return d<i.smallSize?o[r].smallHref:d<i.mediumSize?o[r].mediumHref:o[r].href},size:function(){var e=o[r].element.clientWidth,t=o[r].element.clientHeight,n=void 0;d=s.clientWidth,v=s.clientHeight,d>e&&v>t?n=e>t?"cover-vertically":"cover-horizontally":(d>e&&(n="cover-horizontally"),v>t&&(n="cover-vertically")),o[r].element.classList.add(n)},visibility:function(e){"show"===e&&(o[r].element.classList.add("visible"),i.transitionScale>0&&w.transform({scaleValue:o[r].scale-i.transitionScale}),o[r].caption&&o[r].caption.classList.add("visible")),"hide"===e&&(o[r].element.classList.remove("visible"),o[r].caption&&o[r].caption.classList.remove("visible")),"measure"===e&&o[r].element.classList.add("measure"),"measured"===e&&o[r].element.classList.remove("measure")},show:function(){w.visibility("measure"),i.transitionScale>0&&w.transform({scaleValue:o[r].scale+i.transitionScale}),i.coverScreen&&w.size(),setTimeout(function(){w.visibility("show"),setTimeout(function(){w.visibility("measured")},100)},i.transitionSpeed/4)},prepare:function(e){E.removeEventListeners(),w.visibility("hide"),w.current(e),E.visibility("depends"),w.addEventListeners(),o[r].element.src?o[r].loaded?(b.visibility("hide"),w.show()):b.visibility("show"):!function(e){var t=e;b.visibility("show"),p.element.appendChild(o[t].element),o[t].caption&&p.element.appendChild(o[t].caption),o[t].element.src=w.href(),o[t].element.addEventListener("load",function(){o[t].loaded=!0,b.visibility("hide"),t!==r||c||w.show()})}(r),setTimeout(function(){E.addEventListeners()},i.transitionSpeed/2)},transform:function(e){var t=e.scaleValue,n=void 0===t?o[r].scale:t,s=e.rotateValue,l=void 0===s?o[r].rotate:s;k.removeEventListeners();var a=void 0;0===arguments.rotateValue&&(l=0),a="translate(-50%, -50%) scale("+n+") rotate("+l+"deg)",o[r].scale=n,o[r].rotate=l,o[r].element.style.webkitTransform=a,o[r].element.style.msTransform=a,o[r].element.style.transform=a,setTimeout(function(){k.addEventListeners()},i.transitionSpeed/2)},reset:function(){o[r].element.style.transition=o[r].transition+", left "+i.transitionSpeed+"ms ease, top "+i.transitionSpeed+"ms ease",o[r].element.style.left=null,o[r].element.style.top=null,setTimeout(function(){o[r].element.style.transition=o[r].transition},i.transitionSpeed),w.transform({scaleValue:1,rotateValue:0})},click:function(e){L.div.classList.remove("visible"),e.preventDefault()},wheel:function(e){120===e.wheelDelta?o[r].scale+=o[r].scaleRatio:o[r].scale>=.4&&(o[r].scale-=o[r].scaleRatio),w.transform({scaleValue:o[r].scale}),e.preventDefault()},mousedown:function(e){o[r].offx=e.clientX-o[r].element.offsetLeft,o[r].offy=e.clientY-o[r].element.offsetTop,window.addEventListener("mousemove",w.mousemove),e.preventDefault()},mousemove:function(e){var t=function(){o[r].element.style.left=e.clientX-o[r].offx+"px",o[r].element.style.top=e.clientY-o[r].offy+"px"};window.requestAnimationFrame(t)},mouseup:function(e){window.removeEventListener("mousemove",w.mousemove)},addEventListeners:function(){o[r].element.addEventListener("mousedown",w.mousedown),o[r].element.addEventListener("click",w.click),window.addEventListener("wheel",w.wheel),window.addEventListener("mouseup",w.mouseup),i.coverScreen&&window.addEventListener("resize",w.size)},removeEventListeners:function(){o[r].element.removeEventListener("mousedown",w.mousedown),o[r].element.removeEventListener("click",w.click),window.removeEventListener("wheel",w.wheel),window.removeEventListener("mouseup",w.mouseup),i.coverScreen&&window.removeEventListener("resize",w.size)}},h={element:document.createElement("a"),append:function(){h.element.id="kuvaify-close-button",h.element.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><g stroke="#fff" fill="none" stroke-width="2"><path d="M10 40l30-30M40 40L10 10"/></g></svg>',p.element.appendChild(h.element)},visibility:function(e){"show"===e&&h.element.classList.add("visible"),"hide"===e&&h.element.classList.remove("visible")},close:function(){c=!0,p.visibility("hide"),S.visibility("hide"),w.visibility("hide"),h.visibility("hide"),L.visibility("hide"),E.visibility("hide"),b.visibility("hide"),p.removeEventListeners(),S.removeEventListeners(),w.removeEventListeners(),L.removeEventListeners(),y.removeEventListeners(),g.removeEventListeners(),k.removeEventListeners(),E.removeEventListeners()},closeEvent:function(e){h.close(),e.preventDefault()},keydown:function(e){27===e.keyCode&&h.closeEvent(e)},addEventListeners:function(){h.element.addEventListener("click",h.closeEvent),window.addEventListener("keydown",h.keydown)},removeEventListeners:function(){h.element.removeEventListener("click",h.closeEvent),window.removeEventListener("keydown",h.keydown)}},L={button:document.createElement("a"),div:document.createElement("div"),help:document.createElement("p"),append:function(){L.button.id="kuvaify-menu-button",L.button.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><g stroke="#fff" fill="none" stroke-width="2"><path d="M10 11h30M10 25h30M10 39h30"/></g></svg>',L.div.id="kuvaify-menu-div",L.help.id="kuvaify-help",L.help.innerHTML="Desktop users can use the <strong>left</strong> and <strong>right</strong> keys to navigate; <strong>up</strong> and <strong>down</strong> or <strong>scroll</strong> to zoom; <strong>page up</strong> and <strong>page down</strong> to rotate; <strong>click</strong> and <strong>drag</strong> to move; <strong>home</strong> to reset; and <strong>esc</strong> to close.",k.append(),g.append(),y.append(),i.showShortcuts&&d>1280&&L.div.appendChild(L.help),p.element.appendChild(L.button),p.element.appendChild(L.div)},visibility:function(e){"show"===e&&L.button.classList.add("visible"),"hide"===e&&(L.button.classList.remove("visible"),L.div.classList.remove("visible"))},click:function(e){L.div.classList.contains("visible")?L.div.classList.remove("visible"):L.div.classList.add("visible"),e.preventDefault()},divClick:function(e){L.div.classList.remove("visible"),e.preventDefault()},addEventListeners:function(){L.button.addEventListener("click",L.click),k.addEventListeners(),g.addEventListeners(),y.addEventListeners()},removeEventListeners:function(){L.button.removeEventListener("click",L.click),k.removeEventListeners(),g.removeEventListeners(),y.removeEventListeners()}},y={element:document.createElement("a"),append:function(){y.element.id="kuvaify-reset-button",y.element.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><g stroke="#fff" fill="none" stroke-width="2"><path d="M21.62 28.38L10.31 39.69M12 28h10v10"/><g><path d="M28.38 21.62L39.69 10.31M38 22H28V12"/></g></g></svg>',L.div.appendChild(y.element)},reset:function(e){w.reset(),e.preventDefault()},keydown:function(e){36===e.keyCode&&y.reset(e)},addEventListeners:function(){y.element.addEventListener("click",y.reset),window.addEventListener("keydown",y.keydown)},removeEventListeners:function(){y.element.removeEventListener("click",y.reset),window.removeEventListener("keydown",y.keydown)}},g={_out:document.createElement("a"),_in:document.createElement("a"),append:function(){g._out.id="kuvaify-zoom-out-button",g._out.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><path d="M40 25H10" fill="none" stroke="#fff" stroke-width="2"/></svg>',g._in.id="kuvaify-zoom-in-button",g._in.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><g fill="none" stroke="#fff" stroke-width="2"><path d="M25 40V10M40 25H10"/></g></svg>',L.div.appendChild(g._out),L.div.appendChild(g._in)},zoomOut:function(e){o[r].scale>=.4&&(o[r].scale-=o[r].scaleRatio),w.transform({scaleValue:o[r].scale}),e.preventDefault()},zoomIn:function(e){o[r].scale+=o[r].scaleRatio,w.transform({scaleValue:o[r].scale}),e.preventDefault()},keydown:function(e){38===e.keyCode&&g.zoomIn(e),40===e.keyCode&&g.zoomOut(e)},addEventListeners:function(){g._out.addEventListener("click",g.zoomOut),g._in.addEventListener("click",g.zoomIn),window.addEventListener("keydown",g.keydown)},removeEventListeners:function(){g._out.removeEventListener("click",g.zoomOut),g._in.removeEventListener("click",g.zoomIn),window.removeEventListener("keydown",g.keydown)}},k={negative:document.createElement("a"),positive:document.createElement("a"),append:function(){k.negative.id="kuvaify-rotate-negative-button",k.negative.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><g stroke="#fff" fill="none" stroke-width="2"><path d="M25 39c7.732 0 14-6.268 14-14s-6.268-14-14-14-14 6.268-14 14" stroke-linejoin="round"/><path d="M5.03 17.885l5.565 8.308 8.308-5.567"/></g></svg>',k.positive.id="kuvaify-rotate-positive-button",k.positive.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><g stroke="#fff" fill="none" stroke-width="2"><path d="M25 39c-7.732 0-14-6.268-14-14s6.268-14 14-14 14 6.268 14 14" stroke-linejoin="round"/><path d="M44.97 17.885l-5.565 8.308-8.308-5.567"/></g></svg>',L.div.appendChild(k.negative),L.div.appendChild(k.positive)},negativeRotate:function(e){w.transform({rotateValue:o[r].rotate-90}),e.preventDefault()},positiveRotate:function(e){w.transform({rotateValue:o[r].rotate+90}),e.preventDefault()},keydown:function(e){33===e.keyCode&&k.positiveRotate(e),34===e.keyCode&&k.negativeRotate(e)},addEventListeners:function(){k.negative.addEventListener("click",k.negativeRotate),k.positive.addEventListener("click",k.positiveRotate),window.addEventListener("keydown",k.keydown)},removeEventListeners:function(){k.negative.removeEventListener("click",k.negativeRotate),k.positive.removeEventListener("click",k.positiveRotate),window.removeEventListener("keydown",k.keydown)}},E={next:document.createElement("a"),prev:document.createElement("a"),append:function(){E.next.id="kuvaify-next-button",E.next.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><path d="M14.467 10l20 15-20 15" fill="none" stroke="#fff" stroke-width="2"/></svg>',E.prev.id="kuvaify-prev-button",E.prev.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50.000001 50.000001"><path d="M35.533 10l-20 15 20 15" fill="none" stroke="#fff" stroke-width="2"/></svg>',p.element.appendChild(E.next),p.element.appendChild(E.prev)},visibility:function(e){"depends"===e&&(null===l?E.next.classList.remove("visible"):E.next.classList.add("visible"),null===a?E.prev.classList.remove("visible"):E.prev.classList.add("visible")),"hide"===e&&(E.next.classList.remove("visible"),E.prev.classList.remove("visible"))},getNext:function(){null!==l&&w.prepare(l)},getPrev:function(){null!==a&&w.prepare(a)},nextImg:function(e){E.getNext(),e.preventDefault()},prevImg:function(e){E.getPrev(),e.preventDefault()},keydown:function(e){39===e.keyCode&&E.getNext(e),37===e.keyCode&&E.getPrev(e)},addEventListeners:function(){E.next.addEventListener("click",E.nextImg),E.prev.addEventListener("click",E.prevImg),window.addEventListener("keydown",E.keydown)},removeEventListeners:function(){E.next.removeEventListener("click",E.nextImg),E.prev.removeEventListener("click",E.prevImg),window.removeEventListener("keydown",E.keydown)}},b={element:document.createElement("div"),append:function(){b.element.id="kuvaify-spinner",b.element.innerHTML='<div class="sk-folding-cube"><div class="sk-cube1 sk-cube"></div><div class="sk-cube2 sk-cube"></div><div class="sk-cube4 sk-cube"></div><div class="sk-cube3 sk-cube"></div></div>',b.element.style.transition="opacity "+i.transitionSpeed+"ms ease, visibility "+i.transitionSpeed+"ms ease",p.element.appendChild(b.element)},visibility:function(e){"show"===e&&b.element.classList.add("visible"),"hide"===e&&b.element.classList.remove("visible")}},S={element:document.createElement("div"),append:function(){S.element.id="kuvaify-close-div",p.element.appendChild(S.element)},visibility:function(e){"show"===e&&S.element.classList.add("visible"),"hide"===e&&S.element.classList.remove("visible")},click:function(e){h.close(),e.preventDefault()},addEventListeners:function(){S.element.addEventListener("click",S.click)},removeEventListeners:function(){S.element.removeEventListener("click",S.click)}};n["default"]=m},{}],2:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var s=e("./kuvaify"),o=i(s),r=((0,o["default"])(),document.querySelector("#demo-button")),l=document.querySelector("#demo-link");r.addEventListener("click",function(e){l.click(),e.preventDefault()})},{"./kuvaify":1}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,
